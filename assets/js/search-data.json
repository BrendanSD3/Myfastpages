{
  
    
        "post0": {
            "title": "Introduction",
            "content": "Pandas Home Page . . import pandas as pd reviews = pd.read_csv(&quot;data/winemag-data-130k.csv&quot;, index_col=0) print(&quot;Setup complete.&quot;) . Exercises . View the first several lines of your data by running the cell below: . reviews.head() . 1. . region_1 and region_2 are pretty uninformative names for locale columns in the dataset. Create a copy of reviews with these columns renamed to region and locale, respectively. . renamed = ____ # Check your answer renamed . 2. . Set the index name in the dataset to wines. . reindexed = ____ # Check your answer reindexed . 3. . The Things on Reddit dataset includes product links from a selection of top-ranked forums (&quot;subreddits&quot;) on reddit.com. Run the cell below to load a dataframe of products mentioned on the /r/gaming subreddit and another dataframe for products mentioned on the r//movies subreddit. . Fix the path to the csv . gaming_products = pd.read_csv(&quot;gaming.csv&quot;) gaming_products[&#39;subreddit&#39;] = &quot;r/gaming&quot; movie_products = pd.read_csv(&quot;.movies.csv&quot;) movie_products[&#39;subreddit&#39;] = &quot;r/movies&quot; . Create a DataFrame of products mentioned on either subreddit. . combined_products = ____ # Check your answer . 4. . The Powerlifting Database dataset on Kaggle includes one CSV table for powerlifting meets and a separate one for powerlifting competitors. Run the cell below to load these datasets into dataframes: Fix the path to the csv . powerlifting_meets = pd.read_csv(&quot;powerlifting-database/meets.csv&quot;) powerlifting_competitors = pd.read_csv(&quot;powerlifting-database/openpowerlifting.csv&quot;) . Both tables include references to a MeetID, a unique key for each meet (competition) included in the database. Using this, generate a dataset combining the two tables into one. . powerlifting_combined = ____ # Check your answer .",
            "url": "https://brendansd3.github.io/Myfastpages/2020/12/23/PandasExercise6_-Renaming-and-Combining.html",
            "relUrl": "/2020/12/23/PandasExercise6_-Renaming-and-Combining.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Introduction",
            "content": "Reference Pandas Home Page . . import pandas as pd reviews = pd.read_csv(&quot;data/winemag-data-130k.csv&quot;, index_col=0) print(&quot;Setup complete.&quot;) . Setup complete. . Exercises . 1. . What is the data type of the points column in the dataset? . dtype = ____ # Check your answer dtype . 2. . Create a Series from entries in the points column, but convert the entries to strings. Hint: strings are str in native Python. . point_strings = ____ # Check your answer point_strings . 3. . Sometimes the price column is null. How many reviews in the dataset are missing a price? . n_missing_prices = ____ # Check your answer n_missing_prices . 4. . What are the most common wine-producing regions? Create a Series counting the number of times each value occurs in the region_1 field. This field is often missing data, so replace missing values with Unknown. Sort in descending order. Your output should look something like this: . Unknown 21247 Napa Valley 4480 ... Bardolino Superiore 1 Primitivo del Tarantino 1 Name: region_1, Length: 1230, dtype: int64 . reviews_per_region = ____ # Check your answer reviews_per_region .",
            "url": "https://brendansd3.github.io/Myfastpages/2020/12/23/PandasExercise5_-Data-Types-and-Missing-Values.html",
            "relUrl": "/2020/12/23/PandasExercise5_-Data-Types-and-Missing-Values.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Introduction",
            "content": "Reference Pandas Home Page . . import pandas as pd reviews = pd.read_csv(&quot;data/winemag-data-130k.csv&quot;, index_col=0) #pd.set_option(&quot;display.max_rows&quot;, 5) print(&quot;Setup complete.&quot;) . Setup complete. . Exercises . 1. . Who are the most common wine reviewers in the dataset? Create a Series whose index is the taster_twitter_handle category from the dataset, and whose values count how many reviews each person wrote. . reviews_written = ____ # Check your answer reviews_written . 2. . What is the best wine I can buy for a given amount of money? Create a Series whose index is wine prices and whose values is the maximum number of points a wine costing that much was given in a review. Sort the values by price, ascending (so that 4.0 dollars is at the top and 3300.0 dollars is at the bottom). . best_rating_per_price = ____ # Check your answer best_rating_per_price . 3. . What are the minimum and maximum prices for each variety of wine? Create a DataFrame whose index is the variety category from the dataset and whose values are the min and max values thereof. . price_extremes = ____ # Check your answer price_extremes . 4. . What are the most expensive wine varieties? Create a variable sorted_varieties containing a copy of the dataframe from the previous question where varieties are sorted in descending order based on minimum price, then on maximum price (to break ties). . sorted_varieties = ____ # Check your answer sorted_varieties . 5. . Create a Series whose index is reviewers and whose values is the average review score given out by that reviewer. Hint: you will need the taster_name and points columns. . reviewer_mean_ratings = ____ # Check your answer reviewer_mean_ratings . Are there significant differences in the average scores assigned by the various reviewers? Run the cell below to use the describe() method to see a summary of the range of values. . reviewer_mean_ratings.describe() . 6. . What combination of countries and varieties are most common? Create a Series whose index is a MultiIndexof {country, variety} pairs. For example, a pinot noir produced in the US should map to {&quot;US&quot;, &quot;Pinot Noir&quot;}. Sort the values in the Series in descending order based on wine count. . country_variety_counts = ____ # Check your answer country_variety_counts .",
            "url": "https://brendansd3.github.io/Myfastpages/2020/12/23/PandasExercise4_-Grouping-and-Sorting.html",
            "relUrl": "/2020/12/23/PandasExercise4_-Grouping-and-Sorting.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Exercises",
            "content": "Reference Pandas Home Page . . import pandas as pd pd.set_option(&quot;display.max_rows&quot;, 5) reviews = pd.read_csv(&quot;data/winemag-data-130k.csv&quot;, index_col=0) print(&quot;Setup complete.&quot;) reviews.head() . Setup complete. . country description designation points price province region_1 region_2 taster_name taster_twitter_handle title variety winery . 0 | Italy | Aromas include tropical fruit, broom, brimston... | Vulkà Bianco | 87 | NaN | Sicily &amp; Sardinia | Etna | NaN | Kerin O’Keefe | @kerinokeefe | Nicosia 2013 Vulkà Bianco (Etna) | White Blend | Nicosia | . 1 | Portugal | This is ripe and fruity, a wine that is smooth... | Avidagos | 87 | 15.0 | Douro | NaN | NaN | Roger Voss | @vossroger | Quinta dos Avidagos 2011 Avidagos Red (Douro) | Portuguese Red | Quinta dos Avidagos | . 2 | US | Tart and snappy, the flavors of lime flesh and... | NaN | 87 | 14.0 | Oregon | Willamette Valley | Willamette Valley | Paul Gregutt | @paulgwine | Rainstorm 2013 Pinot Gris (Willamette Valley) | Pinot Gris | Rainstorm | . 3 | US | Pineapple rind, lemon pith and orange blossom ... | Reserve Late Harvest | 87 | 13.0 | Michigan | Lake Michigan Shore | NaN | Alexander Peartree | NaN | St. Julian 2013 Reserve Late Harvest Riesling ... | Riesling | St. Julian | . 4 | US | Much like the regular bottling from 2012, this... | Vintner&#39;s Reserve Wild Child Block | 87 | 65.0 | Oregon | Willamette Valley | Willamette Valley | Paul Gregutt | @paulgwine | Sweet Cheeks 2012 Vintner&#39;s Reserve Wild Child... | Pinot Noir | Sweet Cheeks | . 1. . What is the median of the points column in the reviews DataFrame? 88.0 . median_points = reviews.points.median() # Check your answer median_points . 88.0 . 2. . What countries are represented in the dataset? (Your answer should not include any duplicates.) . countries = reviews.country.unique() # Check your answer countries . array([&#39;Italy&#39;, &#39;Portugal&#39;, &#39;US&#39;, &#39;Spain&#39;, &#39;France&#39;, &#39;Germany&#39;, &#39;Argentina&#39;, &#39;Chile&#39;, &#39;Australia&#39;, &#39;Austria&#39;, &#39;South Africa&#39;, &#39;New Zealand&#39;, &#39;Israel&#39;, &#39;Hungary&#39;, &#39;Greece&#39;, &#39;Romania&#39;, &#39;Mexico&#39;, &#39;Canada&#39;, nan, &#39;Turkey&#39;, &#39;Czech Republic&#39;, &#39;Slovenia&#39;, &#39;Luxembourg&#39;, &#39;Croatia&#39;, &#39;Georgia&#39;, &#39;Uruguay&#39;, &#39;England&#39;, &#39;Lebanon&#39;, &#39;Serbia&#39;, &#39;Brazil&#39;, &#39;Moldova&#39;, &#39;Morocco&#39;, &#39;Peru&#39;, &#39;India&#39;, &#39;Bulgaria&#39;, &#39;Cyprus&#39;, &#39;Armenia&#39;, &#39;Switzerland&#39;, &#39;Bosnia and Herzegovina&#39;, &#39;Ukraine&#39;, &#39;Slovakia&#39;, &#39;Macedonia&#39;, &#39;China&#39;, &#39;Egypt&#39;], dtype=object) . 3. . How often does each country appear in the dataset? Create a Series reviews_per_country mapping countries to the count of reviews of wines from that country. . reviews_per_country = reviews.groupby(&#39;country&#39;).country.count() # Check your answer reviews_per_country . country Argentina 3800 Armenia 2 ... Ukraine 14 Uruguay 109 Name: country, Length: 43, dtype: int64 . 4. . Create variable centered_price containing a version of the price column with the mean price subtracted. . (Note: this &#39;centering&#39; transformation is a common preprocessing step before applying various machine learning algorithms.) . centered_price = reviews.price - reviews.price.mean() # Check your answer centered_price . 0 NaN 1 -20.363389 ... 129969 -3.363389 129970 -14.363389 Name: price, Length: 129971, dtype: float64 . 5. . I&#39;m an economical wine buyer. Which wine is the &quot;best bargain&quot;? Create a variable bargain_wine with the title of the wine with the highest points-to-price ratio in the dataset. . bargain_wine = ____ # Check your answer . 6. . There are only so many words you can use when describing a bottle of wine. Is a wine more likely to be &quot;tropical&quot; or &quot;fruity&quot;? Create a Series descriptor_counts counting how many times each of these two words appears in the description column in the dataset. . descriptor_counts = ____ # Check your answer . 7. . We&#39;d like to host these wine reviews on our website, but a rating system ranging from 80 to 100 points is too hard to understand - we&#39;d like to translate them into simple star ratings. A score of 95 or higher counts as 3 stars, a score of at least 85 but less than 95 is 2 stars. Any other score is 1 star. . Also, the Canadian Vintners Association bought a lot of ads on the site, so any wines from Canada should automatically get 3 stars, regardless of points. . Create a series star_ratings with the number of stars corresponding to each review in the dataset. . star_ratings = ____ # Check your answer .",
            "url": "https://brendansd3.github.io/Myfastpages/2020/12/23/PandasExercise3_-Summary-Functions-and-Maps.html",
            "relUrl": "/2020/12/23/PandasExercise3_-Summary-Functions-and-Maps.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Exercises",
            "content": "References Pandas Home Page . . Run the following cell to load your data and some utility functions (including code to check your answers). . import pandas as pd reviews = pd.read_csv(&quot;data/winemag-data-130k.csv&quot;, index_col=0) pd.set_option(&quot;display.max_rows&quot;, 5) print(&quot;Setup complete.&quot;) . Setup complete. . Look at an overview of your data by running the following line. . reviews.head() . country description designation points price province region_1 region_2 taster_name taster_twitter_handle title variety winery . 0 | Italy | Aromas include tropical fruit, broom, brimston... | Vulkà Bianco | 87 | NaN | Sicily &amp; Sardinia | Etna | NaN | Kerin O’Keefe | @kerinokeefe | Nicosia 2013 Vulkà Bianco (Etna) | White Blend | Nicosia | . 1 | Portugal | This is ripe and fruity, a wine that is smooth... | Avidagos | 87 | 15.0 | Douro | NaN | NaN | Roger Voss | @vossroger | Quinta dos Avidagos 2011 Avidagos Red (Douro) | Portuguese Red | Quinta dos Avidagos | . 2 | US | Tart and snappy, the flavors of lime flesh and... | NaN | 87 | 14.0 | Oregon | Willamette Valley | Willamette Valley | Paul Gregutt | @paulgwine | Rainstorm 2013 Pinot Gris (Willamette Valley) | Pinot Gris | Rainstorm | . 3 | US | Pineapple rind, lemon pith and orange blossom ... | Reserve Late Harvest | 87 | 13.0 | Michigan | Lake Michigan Shore | NaN | Alexander Peartree | NaN | St. Julian 2013 Reserve Late Harvest Riesling ... | Riesling | St. Julian | . 4 | US | Much like the regular bottling from 2012, this... | Vintner&#39;s Reserve Wild Child Block | 87 | 65.0 | Oregon | Willamette Valley | Willamette Valley | Paul Gregutt | @paulgwine | Sweet Cheeks 2012 Vintner&#39;s Reserve Wild Child... | Pinot Noir | Sweet Cheeks | . 1. . Select the description column from reviews and assign the result to the variable desc. . desc = reviews[&quot;description&quot;] # Check your answer desc . 0 Aromas include tropical fruit, broom, brimston... 1 This is ripe and fruity, a wine that is smooth... ... 129969 A dry style of Pinot Gris, this is crisp with ... 129970 Big, rich and off-dry, this is powered by inte... Name: description, Length: 129971, dtype: object . Follow-up question: what type of object is desc? If you&#39;re not sure, you can check by calling Python&#39;s type function: type(desc). . type(desc) . pandas.core.series.Series . 2. . Select the first value from the description column of reviews, assigning it to variable first_description. . first_description = desc[0] # Check your answer first_description . &#34;Aromas include tropical fruit, broom, brimstone and dried herb. The palate isn&#39;t overly expressive, offering unripened apple, citrus and dried sage alongside brisk acidity.&#34; . #q2.solution() . 3. . Select the first row of data (the first record) from reviews, assigning it to the variable first_row. . first_row = reviews.iloc[0, 1] # Check your answer #q3.check() first_row . &#34;Aromas include tropical fruit, broom, brimstone and dried herb. The palate isn&#39;t overly expressive, offering unripened apple, citrus and dried sage alongside brisk acidity.&#34; . #q3.solution() . 4. . Select the first 10 values from the description column in reviews, assigning the result to variable first_descriptions. . Hint: format your output as a pandas Series. . first_descriptions = desc[:10] # Check your answer type(first_descriptions) first_descriptions . 0 Aromas include tropical fruit, broom, brimston... 1 This is ripe and fruity, a wine that is smooth... ... 8 Savory dried thyme notes accent sunnier flavor... 9 This has great depth of flavor with its fresh ... Name: description, Length: 10, dtype: object . 5. . Select the records with index labels 1, 2, 3, 5, and 8, assigning the result to the variable sample_reviews. . In other words, generate the following DataFrame: . . sample_reviews = reviews.loc[[1,2,3,5,8]] # Check your answer sample_reviews . country description designation points price province region_1 region_2 taster_name taster_twitter_handle title variety winery . 1 | Portugal | This is ripe and fruity, a wine that is smooth... | Avidagos | 87 | 15.0 | Douro | NaN | NaN | Roger Voss | @vossroger | Quinta dos Avidagos 2011 Avidagos Red (Douro) | Portuguese Red | Quinta dos Avidagos | . 2 | US | Tart and snappy, the flavors of lime flesh and... | NaN | 87 | 14.0 | Oregon | Willamette Valley | Willamette Valley | Paul Gregutt | @paulgwine | Rainstorm 2013 Pinot Gris (Willamette Valley) | Pinot Gris | Rainstorm | . 3 | US | Pineapple rind, lemon pith and orange blossom ... | Reserve Late Harvest | 87 | 13.0 | Michigan | Lake Michigan Shore | NaN | Alexander Peartree | NaN | St. Julian 2013 Reserve Late Harvest Riesling ... | Riesling | St. Julian | . 5 | Spain | Blackberry and raspberry aromas show a typical... | Ars In Vitro | 87 | 15.0 | Northern Spain | Navarra | NaN | Michael Schachner | @wineschach | Tandem 2011 Ars In Vitro Tempranillo-Merlot (N... | Tempranillo-Merlot | Tandem | . 8 | Germany | Savory dried thyme notes accent sunnier flavor... | Shine | 87 | 12.0 | Rheinhessen | NaN | NaN | Anna Lee C. Iijima | NaN | Heinz Eifel 2013 Shine Gewürztraminer (Rheinhe... | Gewürztraminer | Heinz Eifel | . 6. . Create a variable df containing the country, province, region_1, and region_2 columns of the records with the index labels 0, 1, 10, and 100. In other words, generate the following DataFrame: . . df = reviews.loc[[0,1,10,100],[&quot;country&quot;,&quot;province&quot;,&quot;region_1&quot;,&quot;region_2&quot;]] # Check your answer df . country province region_1 region_2 . 0 | Italy | Sicily &amp; Sardinia | Etna | NaN | . 1 | Portugal | Douro | NaN | NaN | . 10 | US | California | Napa Valley | Napa | . 100 | US | New York | Finger Lakes | Finger Lakes | . 7. . Create a variable df containing the country and variety columns of the first 100 records. . Hint: you may use loc or iloc. When working on the answer this question and the several of the ones that follow, keep the following &quot;gotcha&quot; described in the tutorial: . iloc uses the Python stdlib indexing scheme, where the first element of the range is included and the last one excluded. loc, meanwhile, indexes inclusively. . This is particularly confusing when the DataFrame index is a simple numerical list, e.g. 0,...,1000. In this case df.iloc[0:1000] will return 1000 entries, while df.loc[0:1000] return 1001 of them! To get 1000 elements using loc, you will need to go one lower and ask for df.iloc[0:999]. . df = reviews.loc[:99,[&#39;country&#39;,&#39;variety&#39;]] # Check your answer df . country variety . 0 | Italy | White Blend | . 1 | Portugal | Portuguese Red | . ... | ... | ... | . 98 | Italy | Sangiovese | . 99 | US | Bordeaux-style Red Blend | . 100 rows × 2 columns . 8. . Create a DataFrame italian_wines containing reviews of wines made in Italy. Hint: reviews.country equals what? . italian_wines =reviews.country.isin([&#39;Italy&#39;]) # Check your answer italian_wines . 0 True 1 False ... 129969 False 129970 False Name: country, Length: 129971, dtype: bool . 9. . Create a DataFrame top_oceania_wines containing all reviews with at least 95 points (out of 100) for wines from Australia or New Zealand. . top_oceania_wines = reviews.loc[reviews.country.isin([&#39;Australia&#39;,&#39;New Zealand&#39;]) &amp; (reviews[&#39;points&#39;]&gt;=95)] # Check your answer top_oceania_wines . country description designation points price province region_1 region_2 taster_name taster_twitter_handle title variety winery . 345 | Australia | This wine contains some material over 100 year... | Rare | 100 | 350.0 | Victoria | Rutherglen | NaN | Joe Czerwinski | @JoeCz | Chambers Rosewood Vineyards NV Rare Muscat (Ru... | Muscat | Chambers Rosewood Vineyards | . 346 | Australia | This deep brown wine smells like a damp, mossy... | Rare | 98 | 350.0 | Victoria | Rutherglen | NaN | Joe Czerwinski | @JoeCz | Chambers Rosewood Vineyards NV Rare Muscadelle... | Muscadelle | Chambers Rosewood Vineyards | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 122507 | New Zealand | This blend of Cabernet Sauvignon (62.5%), Merl... | SQM Gimblett Gravels Cabernets/Merlot | 95 | 79.0 | Hawke&#39;s Bay | NaN | NaN | Joe Czerwinski | @JoeCz | Squawking Magpie 2014 SQM Gimblett Gravels Cab... | Bordeaux-style Red Blend | Squawking Magpie | . 122939 | Australia | Full-bodied and plush yet vibrant and imbued w... | The Factor | 98 | 125.0 | South Australia | Barossa Valley | NaN | Joe Czerwinski | @JoeCz | Torbreck 2013 The Factor Shiraz (Barossa Valley) | Shiraz | Torbreck | . 49 rows × 13 columns .",
            "url": "https://brendansd3.github.io/Myfastpages/2020/12/23/PandasExercise2_-Indexing,-Selecting-&-Assigning.html",
            "relUrl": "/2020/12/23/PandasExercise2_-Indexing,-Selecting-&-Assigning.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://brendansd3.github.io/Myfastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://brendansd3.github.io/Myfastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://brendansd3.github.io/Myfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://brendansd3.github.io/Myfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}